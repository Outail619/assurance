<?php

namespace EntityBundle\Repository;

use Doctrine\ORM\NonUniqueResultException;

/**
 * contratRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class contratRepository extends \Doctrine\ORM\EntityRepository
{

    public function findcontrat($vehicule){

        $qb=$this->getEntityManager()
            ->createQuery("SELECT u
                            FROM EntityBundle:contrat u
                            WHERE u.vehicule =:wod ")
            ->setParameter('wod',$vehicule);

        try {
            return $qb->getOneOrNullResult();
        } catch (NonUniqueResultException $e) {
        }

    }

    function getcontratassurance($id_voiture)
    {

        $qb=$this->getEntityManager()
            ->createQuery("select ct.referenceContrat,ct.dateSignature,ct.dateDebut,ct.dateFin, ass.nomAgence, gr.nomGarantie  from EntityBundle:contrat ct JOIN EntityBundle:agence_assurance ass WITH ct.assurances=ass.id JOIN EntityBundle:formule f  WITH ass.id=f.agence JOIN EntityBundle:Garantie gr WITH f.id = gr.formule WHERE ct.vehicule=:n")
            ->setParameter('n',$id_voiture);
        return $qb->getResult();

    }
    public function findByIDclient($id)
    {
        $query=$this->getEntityManager()
            ->createQuery("SELECT m from EntityBundle:contrat m WHERE m.client_id='$id'");
        return $query->getResult();
    }
    public function findByid($id)
    {
        $query=$this->getEntityManager()
            ->createQuery("SELECT m from EntityBundle:contrat m WHERE m.id='$id'");
        return $query->getResult();
    }
    public function findAllExcept($id)
    {
        $query=$this->getEntityManager()
            ->createQuery("SELECT m from EntityBundle:contrat m WHERE NOT(m.client_id='$id')");
        return $query->getResult();
    }

}
